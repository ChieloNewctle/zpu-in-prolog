:- use_module(zpu).

func_entry('subtract', 0).
func_entry('fib_r', 6).
func_entry('.L2', 42).
func_entry('fib_i', 49).
func_entry('.L11', 65).
func_entry('.L13', 76).
func_entry('assert_fib', 83).
func_entry('.L18', 114).
func_entry('branching', 122).
func_entry('.L21', 134).
func_entry('dist', 141).
func_entry('binary_xor_i', 167).
func_entry('.L32', 201).
func_entry('.L30', 218).
func_entry('.L24', 239).

/* subtract */
instruction(0, loadsp, 1).
instruction(1, loadsp, 3).
instruction(2, sub, _).
instruction(3, storeret, _).
instruction(4, nop, _).
instruction(5, poppc, _).
/* fib_r */
instruction(6, im, -2).
instruction(7, pushspadd, _).
instruction(8, popsp, _).
instruction(9, loadsp, 4).
instruction(10, storesp, 3).
instruction(11, im, 0).
instruction(12, storesp, 2).
instruction(13, loadsp, 1).
instruction(14, loadsp, 3).
instruction(15, lessthanorequal, _).
instruction(16, im, 42).
instruction(17, neqbranch, _).
instruction(18, im, 1).
instruction(19, storesp, 2).
instruction(20, loadsp, 1).
instruction(21, loadsp, 3).
instruction(22, lessthanorequal, _).
instruction(23, im, 42).
instruction(24, neqbranch, _).
instruction(25, im, -2).
instruction(26, addsp, 3).
instruction(27, storesp, 1).
instruction(28, im, 6).
instruction(29, call, _).
instruction(30, loadret, _).
instruction(31, nop, _).
instruction(32, im, -1).
instruction(33, addsp, 4).
instruction(34, storesp, 2).
instruction(35, storesp, 2).
instruction(36, im, 6).
instruction(37, call, _).
instruction(38, loadret, _).
instruction(39, nop, _).
instruction(40, addsp, 2).
instruction(41, storesp, 2).
/* .L2 */
instruction(42, loadsp, 1).
instruction(43, storeret, _).
instruction(44, nop, _).
instruction(45, im, 4).
instruction(46, pushspadd, _).
instruction(47, popsp, _).
instruction(48, poppc, _).
/* fib_i */
instruction(49, im, -3).
instruction(50, pushspadd, _).
instruction(51, popsp, _).
instruction(52, loadsp, 5).
instruction(53, storesp, 1).
instruction(54, im, 0).
instruction(55, storesp, 4).
instruction(56, im, 1).
instruction(57, storesp, 3).
instruction(58, loadsp, 3).
instruction(59, loadsp, 1).
instruction(60, lessthanorequal, _).
instruction(61, im, 76).
instruction(62, neqbranch, _).
instruction(63, loadsp, 0).
instruction(64, storesp, 2).
/* .L11 */
instruction(65, loadsp, 2).
instruction(66, addsp, 4).
instruction(67, loadsp, 3).
instruction(68, storesp, 5).
instruction(69, im, -1).
instruction(70, addsp, 3).
instruction(71, storesp, 3).
instruction(72, storesp, 3).
instruction(73, loadsp, 1).
instruction(74, im, 65).
instruction(75, neqbranch, _).
/* .L13 */
instruction(76, loadsp, 3).
instruction(77, storeret, _).
instruction(78, nop, _).
instruction(79, im, 5).
instruction(80, pushspadd, _).
instruction(81, popsp, _).
instruction(82, poppc, _).
/* assert_fib */
instruction(83, im, -3).
instruction(84, pushspadd, _).
instruction(85, popsp, _).
instruction(86, loadsp, 5).
instruction(87, storesp, 3).
instruction(88, im, 0).
instruction(89, loadsp, 3).
instruction(90, storesp, 2).
instruction(91, storesp, 4).
instruction(92, im, 6).
instruction(93, call, _).
instruction(94, loadret, _).
instruction(95, nop, _).
instruction(96, loadsp, 3).
instruction(97, storesp, 2).
instruction(98, storesp, 2).
instruction(99, im, 49).
instruction(100, call, _).
instruction(101, loadsp, 1).
instruction(102, loadret, _).
instruction(103, nop, _).
instruction(104, eq, _).
instruction(105, im, 114).
instruction(106, neqbranch, _).
instruction(107, loadsp, 3).
instruction(108, storeret, _).
instruction(109, nop, _).
instruction(110, im, 5).
instruction(111, pushspadd, _).
instruction(112, popsp, _).
instruction(113, poppc, _).
/* .L18 */
instruction(114, im, 1).
instruction(115, nop, _).
instruction(116, storeret, _).
instruction(117, nop, _).
instruction(118, im, 5).
instruction(119, pushspadd, _).
instruction(120, popsp, _).
instruction(121, poppc, _).
/* branching */
instruction(122, im, 0).
instruction(123, pushspadd, _).
instruction(124, popsp, _).
instruction(125, im, 391).
instruction(126, storesp, 1).
instruction(127, im, 3).
instruction(128, loadsp, 3).
instruction(129, lessthanorequal, _).
instruction(130, im, 134).
instruction(131, neqbranch, _).
instruction(132, im, 1096).
instruction(133, storesp, 1).
/* .L21 */
instruction(134, loadsp, 0).
instruction(135, storeret, _).
instruction(136, nop, _).
instruction(137, im, 2).
instruction(138, pushspadd, _).
instruction(139, popsp, _).
instruction(140, poppc, _).
/* dist */
instruction(141, im, -3).
instruction(142, pushspadd, _).
instruction(143, popsp, _).
instruction(144, loadsp, 5).
instruction(145, loadsp, 8).
instruction(146, sub, _).
instruction(147, loadsp, 6).
instruction(148, loadsp, 9).
instruction(149, sub, _).
instruction(150, mult, _).
instruction(151, loadsp, 7).
instruction(152, loadsp, 10).
instruction(153, sub, _).
instruction(154, loadsp, 8).
instruction(155, loadsp, 11).
instruction(156, sub, _).
instruction(157, mult, _).
instruction(158, storesp, 4).
instruction(159, loadsp, 3).
instruction(160, add, _).
instruction(161, storeret, _).
instruction(162, nop, _).
instruction(163, im, 5).
instruction(164, pushspadd, _).
instruction(165, popsp, _).
instruction(166, poppc, _).
/* binary_xor_i */
instruction(167, im, -8).
instruction(168, pushspadd, _).
instruction(169, popsp, _).
instruction(170, loadsp, 10).
instruction(171, loadsp, 12).
instruction(172, im, 0).
instruction(173, loadsp, 2).
instruction(174, lessthan, _).
instruction(175, im, 0).
instruction(176, loadsp, 2).
instruction(177, lessthan, _).
instruction(178, or, _).
instruction(179, storesp, 5).
instruction(180, storesp, 6).
instruction(181, storesp, 7).
instruction(182, im, -1).
instruction(183, storesp, 4).
instruction(184, loadsp, 2).
instruction(185, im, 239).
instruction(186, neqbranch, _).
instruction(187, loadsp, 2).
instruction(188, im, 2147483647).
instruction(189, loadsp, 8).
instruction(190, mod, _).
instruction(191, im, 2147483647).
instruction(192, loadsp, 7).
instruction(193, mod, _).
instruction(194, storesp, 7).
instruction(195, storesp, 8).
instruction(196, storesp, 9).
instruction(197, im, 1).
instruction(198, storesp, 6).
instruction(199, im, 30).
instruction(200, storesp, 8).
/* .L32 */
instruction(201, loadsp, 6).
instruction(202, im, 1).
instruction(203, and, _).
instruction(204, loadsp, 5).
instruction(205, im, 1).
instruction(206, and, _).
instruction(207, storesp, 4).
instruction(208, storesp, 4).
instruction(209, loadsp, 3).
instruction(210, loadsp, 3).
instruction(211, eq, _).
instruction(212, im, 218).
instruction(213, neqbranch, _).
instruction(214, loadsp, 8).
instruction(215, loadsp, 6).
instruction(216, or, _).
instruction(217, storesp, 9).
/* .L30 */
instruction(218, im, -1).
instruction(219, addsp, 8).
instruction(220, loadsp, 6).
instruction(221, addsp, 7).
instruction(222, loadsp, 8).
instruction(223, im, 1).
instruction(224, ashiftright, _).
instruction(225, loadsp, 7).
instruction(226, im, 1).
instruction(227, ashiftright, _).
instruction(228, storesp, 8).
instruction(229, storesp, 9).
instruction(230, storesp, 7).
instruction(231, storesp, 8).
instruction(232, loadsp, 7).
instruction(233, im, 0).
instruction(234, lessthanorequal, _).
instruction(235, im, 201).
instruction(236, neqbranch, _).
instruction(237, loadsp, 8).
instruction(238, storesp, 4).
/* .L24 */
instruction(239, loadsp, 3).
instruction(240, storeret, _).
instruction(241, nop, _).
instruction(242, im, 10).
instruction(243, pushspadd, _).
instruction(244, popsp, _).
instruction(245, poppc, _).
